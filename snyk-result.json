{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-CLEANCSS-11052"
      ],
      "creationTime": "2018-03-07T11:56:23.869000Z",
      "credit": [
        "Jamie Davis"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n\n[clean-css](https://www.npmjs.com/package/clean-css) is a fast and efficient CSS optimizer for Node.js platform and any modern browser.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nattacks. This can cause an impact of about 10 seconds matching time for data 70k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 20th, 2018 - Initial Response from package owner\n* Mar 6th, 2018 - Fix issued\n* Mar 7th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `clean-css` to version 4.1.11 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jakubpawlowicz/clean-css/commit/2929bafbf8cdf7dccb24e0949c70833764fa87e3)\n",
      "disclosureTime": "2018-03-06T11:56:23Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "4.1.11"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/optimizer/validator.js",
            "functionName": "validator"
          },
          "version": [
            "<4.1.11"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/optimizer/validator.js",
            "functionName": "validator"
          },
          "version": [
            "<4.1.11"
          ]
        }
      ],
      "id": "npm:clean-css:20180306",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-CLEANCSS-11052"
        ],
        "CVE": [],
        "CWE": [
          "CWE-185",
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-wxhq-pm8v-cw75"
        ],
        "NSP": [
          785
        ]
      },
      "language": "js",
      "modificationTime": "2019-01-10T13:40:08.485669Z",
      "moduleName": "clean-css",
      "packageManager": "npm",
      "packageName": "clean-css",
      "patches": [],
      "publicationTime": "2018-03-07T11:51:05Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jakubpawlowicz/clean-css/commit/2929bafbf8cdf7dccb24e0949c70833764fa87e3"
        }
      ],
      "semver": {
        "vulnerable": [
          "<4.1.11"
        ]
      },
      "severity": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "dockerexample@0.0.0",
        "jade@1.11.0",
        "clean-css@3.4.28"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "clean-css",
      "version": "3.4.28"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
      "alternativeIds": [
        "SNYK-JS-CONSTANTINOPLE-12136"
      ],
      "creationTime": "2018-03-02T16:46:56.854000Z",
      "credit": [
        "Mike Samuel"
      ],
      "cvssScore": 10,
      "description": "## Overview\r\n[`constantinople`](https://www.npmjs.com/package/constantinople) determines whether a JavaScript expression evaluates to a constant (using acorn).\r\n\r\nAffected versions of this package are vulnerable to a sandbox bypass which can lead to arbitrary code execution.\r\n\r\n## Remediation\r\nUpgrade `constantinople` to version 3.1.1 or higher.\r\n\r\n## References\r\n- [NSP Advisory](https://nodesecurity.io/advisories/568)",
      "disclosureTime": "2018-04-21T04:33:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.1.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:constantinople:20180421",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-CONSTANTINOPLE-12136"
        ],
        "CVE": [],
        "CWE": [
          "CWE-264"
        ],
        "GHSA": [
          "GHSA-4vmm-mhcq-4x9j"
        ],
        "NSP": [
          568
        ]
      },
      "language": "js",
      "modificationTime": "2019-06-02T07:14:02.722430Z",
      "moduleName": "constantinople",
      "packageManager": "npm",
      "packageName": "constantinople",
      "patches": [],
      "publicationTime": "2018-05-09T16:11:26Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/pugjs/constantinople/commit/01d409c0d081dfd65223e6b7767c244156d35f7f"
        },
        {
          "title": "NSP Advisory",
          "url": "https://nodesecurity.io/advisories/568"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.1.1"
        ]
      },
      "severity": "high",
      "title": "Sandbox Bypass",
      "from": [
        "dockerexample@0.0.0",
        "jade@1.11.0",
        "constantinople@3.0.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "constantinople",
      "version": "3.0.2"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10041"
      ],
      "creationTime": "2015-08-24T09:29:10Z",
      "credit": [
        "Tom MacWright"
      ],
      "cvssScore": 8.3,
      "description": "## Overview\r\n[`uglify-js`](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\r\n\r\n[Tom MacWright](https://github.com/mishoo/UglifyJS2/issues/751) discovered that UglifyJS versions 2.4.23 and earlier are affected by a vulnerability which allows a specially crafted Javascript file to have altered functionality after minification. This bug was [demonstrated](https://zyan.scripts.mit.edu/blog/backdooring-js/) by [Yan](https://twitter.com/bcrypt) to allow potentially malicious code to be hidden within secure code, activated by minification.\r\n\r\n### Details\r\nIn Boolean algebra, DeMorgan's laws describe the relationships between conjunctions (`&&`), disjunctions (`||`) and negations (`!`).\r\nIn Javascript form, they state that:\r\n```savascript\r\n !(a && b) === (!a) || (!b)\r\n !(a || b) === (!a) && (!b)\r\n```\r\n\r\nThe law does not hold true when one of the values is not a boolean however.\r\n\r\nVulnerable versions of UglifyJS do not account for this restriction, and erroneously apply the laws to a statement if it can be reduced in length by it.\r\n\r\nConsider this authentication function:\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft =\r\n        !!config && // config object exists\r\n        !!user.token && // user object has a token\r\n        !user.token.invalidated && // token is not explicitly invalidated\r\n        !config.uninitialized && // config is initialized\r\n        !config.ignoreTimestamps && // don't ignore timestamps\r\n        getTimeLeft(user.token.expiry); // > 0 if expiration is in the future\r\n\r\n    // The token must not be expired\r\n    return timeLeft > 0;\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n  return expiry - getSystemTime();\r\n}\r\n```\r\nWhen minified with a vulnerable version of UglifyJS, it will produce the following insecure output, where a token will never expire:\r\n\r\n( Formatted for readability )\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft = !(                       // negation\r\n        !config                             // config object does not exist\r\n        || !user.token                      // user object does not have a token\r\n        || user.token.invalidated           // token is explicitly invalidated\r\n        || config.uninitialized             // config isn't initialized\r\n        || config.ignoreTimestamps          // ignore timestamps\r\n        || !getTimeLeft(user.token.expiry)  // > 0 if expiration is in the future\r\n    );\r\n    return timeLeft > 0\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n    return expiry - getSystemTime()\r\n}\r\n```\r\n\r\n## Remediation\r\nUpgrade UglifyJS to version `2.4.24` or higher.\r\n\r\n## References\r\n- [Blog Post](https://zyan.scripts.mit.edu/blog/backdooring-js/)\r\n- [GitHub Issue](https://github.com/mishoo/UglifyJS2/issues/751)",
      "disclosureTime": "2015-08-24T09:29:10Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.4.24"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/compress.js",
            "functionName": "Compressor"
          },
          "version": [
            ">=2.2.0 <2.4.24"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/compress.js",
            "functionName": "Compressor"
          },
          "version": [
            ">=2.2.0 <2.4.24"
          ]
        }
      ],
      "id": "npm:uglify-js:20150824",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10041"
        ],
        "CVE": [
          "CVE-2015-8857"
        ],
        "CWE": [
          "CWE-95"
        ],
        "NSP": [
          39
        ]
      },
      "language": "js",
      "modificationTime": "2019-04-30T15:19:20.298795Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:uglify-js:20150824:0",
          "modificationTime": "2019-12-03T11:40:45.756528Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20150824/uglify-js_20150824_0_0_905b6011784ca60d41919ac1a499962b7c1d4b02_snyk.patch"
          ],
          "version": "<= 2.4.23 >2.0.0"
        }
      ],
      "publicationTime": "2015-08-24T09:29:10Z",
      "references": [
        {
          "title": "Blog Post",
          "url": "https://zyan.scripts.mit.edu/blog/backdooring-js/"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/mishoo/UglifyJS2/issues/751"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=2.2.0 <2.4.24"
        ]
      },
      "severity": "high",
      "title": "Improper minification of non-boolean comparisons",
      "from": [
        "dockerexample@0.0.0",
        "jade@1.11.0",
        "transformers@2.1.0",
        "uglify-js@2.2.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "uglify-js",
      "version": "2.2.5"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10059"
      ],
      "creationTime": "2015-11-06T02:09:36.186000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\nThe `parse()` function in the [`uglify-js`](https://www.npmjs.com/package/uglify-js) package prior to version 2.6.0 is vulnerable to regular expression denial of service (ReDoS) attacks when long inputs of certain patterns are processed.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n## Remediation\r\nUpgrade to version `2.6.0` or greater.\r\nIf a direct dependency update is not possible, use `snyk wizard` to patch this vulnerability.\r\n\r\n## References\r\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)",
      "disclosureTime": "2015-10-24T21:01:32Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "id": "npm:uglify-js:20151024",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10059"
        ],
        "CVE": [
          "CVE-2015-8858"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          48
        ]
      },
      "language": "js",
      "modificationTime": "2019-03-05T10:54:37.391574Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:0",
          "modificationTime": "2019-12-03T11:40:45.767604Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk_inc.patch"
          ],
          "version": "<= 2.4.23 >=2.2.0"
        },
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:1",
          "modificationTime": "2019-12-03T11:40:45.768705Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk.patch"
          ],
          "version": "<2.6.0 >2.4.23"
        }
      ],
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mishoo/UglifyJS2/commit/63d35f8f6db6d90d6142132d2d5f0bd5d3d698aa"
        },
        {
          "title": "OWASP - ReDoS",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.0"
        ]
      },
      "severity": "medium",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "dockerexample@0.0.0",
        "jade@1.11.0",
        "transformers@2.1.0",
        "uglify-js@2.2.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "uglify-js",
      "version": "2.2.5"
    }
  ],
  "ok": false,
  "dependencyCount": 100,
  "org": "miltonpereira",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.14.1\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "ignoreSettings": null,
  "summary": "4 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-CLEANCSS-11052"
        ],
        "creationTime": "2018-03-07T11:56:23.869000Z",
        "credit": [
          "Jamie Davis"
        ],
        "cvssScore": 3.7,
        "description": "## Overview\n\n[clean-css](https://www.npmjs.com/package/clean-css) is a fast and efficient CSS optimizer for Node.js platform and any modern browser.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nattacks. This can cause an impact of about 10 seconds matching time for data 70k characters long.\n\n## Disclosure Timeline\n* Feb 15th, 2018 - Initial Disclosure to package owner\n* Feb 20th, 2018 - Initial Response from package owner\n* Mar 6th, 2018 - Fix issued\n* Mar 7th, 2018 - Vulnerability published\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `clean-css` to version 4.1.11 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jakubpawlowicz/clean-css/commit/2929bafbf8cdf7dccb24e0949c70833764fa87e3)\n",
        "disclosureTime": "2018-03-06T11:56:23Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "4.1.11"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/optimizer/validator.js",
              "functionName": "validator"
            },
            "version": [
              "<4.1.11"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/optimizer/validator.js",
              "functionName": "validator"
            },
            "version": [
              "<4.1.11"
            ]
          }
        ],
        "id": "npm:clean-css:20180306",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-CLEANCSS-11052"
          ],
          "CVE": [],
          "CWE": [
            "CWE-185",
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-wxhq-pm8v-cw75"
          ],
          "NSP": [
            785
          ]
        },
        "language": "js",
        "modificationTime": "2019-01-10T13:40:08.485669Z",
        "moduleName": "clean-css",
        "packageManager": "npm",
        "packageName": "clean-css",
        "patches": [],
        "publicationTime": "2018-03-07T11:51:05Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jakubpawlowicz/clean-css/commit/2929bafbf8cdf7dccb24e0949c70833764fa87e3"
          }
        ],
        "semver": {
          "vulnerable": [
            "<4.1.11"
          ]
        },
        "severity": "low",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "dockerexample@0.0.0",
          "jade@1.11.0",
          "clean-css@3.4.28"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "clean-css",
        "version": "3.4.28"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-CONSTANTINOPLE-12136"
        ],
        "creationTime": "2018-03-02T16:46:56.854000Z",
        "credit": [
          "Mike Samuel"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n[`constantinople`](https://www.npmjs.com/package/constantinople) determines whether a JavaScript expression evaluates to a constant (using acorn).\r\n\r\nAffected versions of this package are vulnerable to a sandbox bypass which can lead to arbitrary code execution.\r\n\r\n## Remediation\r\nUpgrade `constantinople` to version 3.1.1 or higher.\r\n\r\n## References\r\n- [NSP Advisory](https://nodesecurity.io/advisories/568)",
        "disclosureTime": "2018-04-21T04:33:52Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.1.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:constantinople:20180421",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-CONSTANTINOPLE-12136"
          ],
          "CVE": [],
          "CWE": [
            "CWE-264"
          ],
          "GHSA": [
            "GHSA-4vmm-mhcq-4x9j"
          ],
          "NSP": [
            568
          ]
        },
        "language": "js",
        "modificationTime": "2019-06-02T07:14:02.722430Z",
        "moduleName": "constantinople",
        "packageManager": "npm",
        "packageName": "constantinople",
        "patches": [],
        "publicationTime": "2018-05-09T16:11:26Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/pugjs/constantinople/commit/01d409c0d081dfd65223e6b7767c244156d35f7f"
          },
          {
            "title": "NSP Advisory",
            "url": "https://nodesecurity.io/advisories/568"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.1.1"
          ]
        },
        "severity": "high",
        "title": "Sandbox Bypass",
        "from": [
          "dockerexample@0.0.0",
          "jade@1.11.0",
          "constantinople@3.0.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "constantinople",
        "version": "3.0.2"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-UGLIFYJS-10041"
        ],
        "creationTime": "2015-08-24T09:29:10Z",
        "credit": [
          "Tom MacWright"
        ],
        "cvssScore": 8.3,
        "description": "## Overview\r\n[`uglify-js`](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\r\n\r\n[Tom MacWright](https://github.com/mishoo/UglifyJS2/issues/751) discovered that UglifyJS versions 2.4.23 and earlier are affected by a vulnerability which allows a specially crafted Javascript file to have altered functionality after minification. This bug was [demonstrated](https://zyan.scripts.mit.edu/blog/backdooring-js/) by [Yan](https://twitter.com/bcrypt) to allow potentially malicious code to be hidden within secure code, activated by minification.\r\n\r\n### Details\r\nIn Boolean algebra, DeMorgan's laws describe the relationships between conjunctions (`&&`), disjunctions (`||`) and negations (`!`).\r\nIn Javascript form, they state that:\r\n```savascript\r\n !(a && b) === (!a) || (!b)\r\n !(a || b) === (!a) && (!b)\r\n```\r\n\r\nThe law does not hold true when one of the values is not a boolean however.\r\n\r\nVulnerable versions of UglifyJS do not account for this restriction, and erroneously apply the laws to a statement if it can be reduced in length by it.\r\n\r\nConsider this authentication function:\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft =\r\n        !!config && // config object exists\r\n        !!user.token && // user object has a token\r\n        !user.token.invalidated && // token is not explicitly invalidated\r\n        !config.uninitialized && // config is initialized\r\n        !config.ignoreTimestamps && // don't ignore timestamps\r\n        getTimeLeft(user.token.expiry); // > 0 if expiration is in the future\r\n\r\n    // The token must not be expired\r\n    return timeLeft > 0;\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n  return expiry - getSystemTime();\r\n}\r\n```\r\nWhen minified with a vulnerable version of UglifyJS, it will produce the following insecure output, where a token will never expire:\r\n\r\n( Formatted for readability )\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft = !(                       // negation\r\n        !config                             // config object does not exist\r\n        || !user.token                      // user object does not have a token\r\n        || user.token.invalidated           // token is explicitly invalidated\r\n        || config.uninitialized             // config isn't initialized\r\n        || config.ignoreTimestamps          // ignore timestamps\r\n        || !getTimeLeft(user.token.expiry)  // > 0 if expiration is in the future\r\n    );\r\n    return timeLeft > 0\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n    return expiry - getSystemTime()\r\n}\r\n```\r\n\r\n## Remediation\r\nUpgrade UglifyJS to version `2.4.24` or higher.\r\n\r\n## References\r\n- [Blog Post](https://zyan.scripts.mit.edu/blog/backdooring-js/)\r\n- [GitHub Issue](https://github.com/mishoo/UglifyJS2/issues/751)",
        "disclosureTime": "2015-08-24T09:29:10Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.4.24"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/compress.js",
              "functionName": "Compressor"
            },
            "version": [
              ">=2.2.0 <2.4.24"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/compress.js",
              "functionName": "Compressor"
            },
            "version": [
              ">=2.2.0 <2.4.24"
            ]
          }
        ],
        "id": "npm:uglify-js:20150824",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-UGLIFYJS-10041"
          ],
          "CVE": [
            "CVE-2015-8857"
          ],
          "CWE": [
            "CWE-95"
          ],
          "NSP": [
            39
          ]
        },
        "language": "js",
        "modificationTime": "2019-04-30T15:19:20.298795Z",
        "moduleName": "uglify-js",
        "packageManager": "npm",
        "packageName": "uglify-js",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:uglify-js:20150824:0",
            "modificationTime": "2019-12-03T11:40:45.756528Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20150824/uglify-js_20150824_0_0_905b6011784ca60d41919ac1a499962b7c1d4b02_snyk.patch"
            ],
            "version": "<= 2.4.23 >2.0.0"
          }
        ],
        "publicationTime": "2015-08-24T09:29:10Z",
        "references": [
          {
            "title": "Blog Post",
            "url": "https://zyan.scripts.mit.edu/blog/backdooring-js/"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/mishoo/UglifyJS2/issues/751"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=2.2.0 <2.4.24"
          ]
        },
        "severity": "high",
        "title": "Improper minification of non-boolean comparisons",
        "from": [
          "dockerexample@0.0.0",
          "jade@1.11.0",
          "transformers@2.1.0",
          "uglify-js@2.2.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "isPinnable": false,
        "name": "uglify-js",
        "version": "2.2.5"
      }
    ],
    "upgrade": {},
    "patch": {
      "npm:uglify-js:20151024": {
        "paths": [
          {
            "jade > transformers > uglify-js": {
              "patched": "2020-05-08T07:57:31.714Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 4,
  "projectName": "dockerexample",
  "displayTargetFile": "package-lock.json",
  "path": "/project"
}
